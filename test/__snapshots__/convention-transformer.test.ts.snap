// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`disable2 1`] = `
"model Model {
  id                String   @id @default(cuid())
  passwordsSingular String[] @map("passwords_singular")
  requestsSingulars String[] @map("requests_singular")
  columnsSingular   String[] @map("columns_singular")
  pluralsPlurals    String[] @map("pluralsPlural")
  plurals           String[] @map("plural")
}
"
`;

exports[`if next-auth is marked as in use, those models should be managed separately/consistently 1`] = `
"model MyModel {
  id        String @id @default(uuid())
  dataField String @map("data_field")

  @@map("my_model")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
"
`;

exports[`if the entity is marked disabled, or is marked with !, formatting is applied specially 1`] = `
"model mYMoDeL {
  lMfAo           String @id @map("ToXiC_DeV_____WaS_HeeeEeEeRe_ayY_lMao")
  i_h8_ur_company Json

  @@map("so_uncalled_for_dot_gov")
}

model PartiallyMaintained {
  id String @id

  MaintainedProperty    String @map("maintained_property")
  unmaintained_property String
  divergentConvention   Int    @map("SeeItsACompletelyDifferentName")

  @@map("partially_maintained")
}

model Pristine {
  id             Int      @id
  data           String   @unique
  convertThisPls DateTime @map("convert_this_pls")
}

model AmazingModel {
  id   Int    @id
  fuzz String @map("fizz_buzz")

  @@map("Amaze_o")
}

enum Taxis {
  Yellow
  Uber

  @@map("Cabs")
}

enum Taxes {
  TaxCode1
  TaxCode2

  @@map("tax_codes")
}
"
`;

exports[`issue 1`] = `
"model Sessions {
  sessionId String  @id @map("session_id") @localContainer.VarChar(128)
  expires   Int     @localContainer.UnsignedInt
  data      String? @localContainer.Text

  @@map("sessions")
}
"
`;

exports[`issue2 1`] = `
"model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model User {
  id       String    @id
  accounts Account[]
}
"
`;

exports[`it can enforce a specified case convention on all fields of all tables (camelCase): camelCase 1`] = `
"datasource db {
  provider = "sqlite"
  url      = "file:database.db"
}

// generator
generator client {
  provider = "prisma-client-js"
}

model DemoIt {
  id        Int    @id
  dataField String
}
"
`;

exports[`it can enforce a specified case convention on all fields of all tables (camelCase): camelCase 2`] = `
"datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Projects {
  id         Int          @id @default(autoincrement())
  name       String?      @db.VarChar
  jiraIssues JiraIssues[]

  @@map("projects")
}

model JiraIssues {
  id                Int       @id @default(autoincrement())
  jiraIntegrationId Int?
  projectId         Int
  projects          Projects? @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "jira_issues_projects_fkey")

  @@map("jira_issues")
}

model FieldKey {
  key    String
  type   String // str, num, bool
  formId String @db.Uuid
  form   Form   @relation(references: [id], fields: [formId], onDelete: Cascade)

  @@id([key, formId])
  @@map("field_key")
}
"
`;

exports[`it can enforce a specified case convention on all fields of all tables (camelCase): camelCase 3`] = `
"datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Business {
  id                 String               @id(map: "BusinessId") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  languageCode       String               @db.Char(2)
  currencyCode       String               @db.Char(3)
  createdAt          DateTime             @default(now()) @db.Timestamptz(0)
  name               String               @db.VarChar(64)
  language           String[]             @default([]) @db.Char(2)
  phone              String               @db.VarChar(15)
  address            String?              @db.VarChar(250)
  billingName        String?              @db.VarChar(64)
  billingAddress     String?              @db.VarChar(250)
  taxOffice          String?              @db.VarChar(64)
  taxId              String?              @db.VarChar(64)
  defaultTaxRate     Decimal?             @db.Decimal(8, 6)
  isActive           Boolean              @default(true)
  batchOperation     BatchOperation[]
  currency           Currency             @relation(fields: [currencyCode], references: [code], onUpdate: Restrict, map: "BusinessCurrency")
  language           Language             @relation(fields: [languageCode], references: [code], onUpdate: Restrict, map: "BusinessLanguage")
  ingredientCategory IngredientCategory[]
  itemCategory       ItemCategory[]
  optionCategory     OptionCategory[]
  profile            Profile[]
  recipe             Recipe[]
  tab                Tab[]
  targetGroup        TargetGroup[]

  @@schema("public")
}
"
`;

exports[`it can enforce a specified case convention on all fields of all tables (pascalCase): pascalCase 1`] = `
"datasource db {
  provider = "sqlite"
  url      = "file:database.db"
}

// generator
generator client {
  provider = "prisma-client-js"
}

model DemoIt {
  id        Int    @id @map("Id")
  dataField String @map("DataField")
}
"
`;

exports[`it can enforce a specified case convention on all fields of all tables (pascalCase): pascalCase 2`] = `
"datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Projects {
  id         Int          @id @default(autoincrement()) @map("Id")
  name       String?      @map("Name") @db.VarChar
  jiraIssues JiraIssues[]

  @@map("projects")
}

model JiraIssues {
  id                Int       @id @default(autoincrement()) @map("Id")
  jiraIntegrationId Int?      @map("JiraIntegrationId")
  projectId         Int       @map("ProjectId")
  projects          Projects? @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "jira_issues_projects_fkey")

  @@map("jira_issues")
}

model FieldKey {
  key    String @map("Key")
  type   String @map("Type") // str, num, bool
  formId String @map("FormId") @db.Uuid
  form   Form   @relation(references: [id], fields: [formId], onDelete: Cascade)

  @@id([key, formId])
  @@map("field_key")
}
"
`;

exports[`it can enforce a specified case convention on all fields of all tables (pascalCase): pascalCase 3`] = `
"datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Business {
  id                 String               @id(map: "BusinessId") @default(dbgenerated("gen_random_uuid()")) @map("Id") @db.Uuid
  languageCode       String               @map("LanguageCode") @db.Char(2)
  currencyCode       String               @map("CurrencyCode") @db.Char(3)
  createdAt          DateTime             @default(now()) @map("CreatedAt") @db.Timestamptz(0)
  name               String               @map("Name") @db.VarChar(64)
  language           String[]             @default([]) @map("Language") @db.Char(2)
  phone              String               @map("Phone") @db.VarChar(15)
  address            String?              @map("Address") @db.VarChar(250)
  billingName        String?              @map("BillingName") @db.VarChar(64)
  billingAddress     String?              @map("BillingAddress") @db.VarChar(250)
  taxOffice          String?              @map("TaxOffice") @db.VarChar(64)
  taxId              String?              @map("TaxId") @db.VarChar(64)
  defaultTaxRate     Decimal?             @map("DefaultTaxRate") @db.Decimal(8, 6)
  isActive           Boolean              @default(true) @map("IsActive")
  batchOperation     BatchOperation[]
  currency           Currency             @relation(fields: [currencyCode], references: [code], onUpdate: Restrict, map: "BusinessCurrency")
  language           Language             @relation(fields: [languageCode], references: [code], onUpdate: Restrict, map: "BusinessLanguage")
  ingredientCategory IngredientCategory[]
  itemCategory       ItemCategory[]
  optionCategory     OptionCategory[]
  profile            Profile[]
  recipe             Recipe[]
  tab                Tab[]
  targetGroup        TargetGroup[]

  @@schema("public")
}
"
`;

exports[`it can enforce a specified case convention on all fields of all tables (snakeCase): snakeCase 1`] = `
"datasource db {
  provider = "sqlite"
  url      = "file:database.db"
}

// generator
generator client {
  provider = "prisma-client-js"
}

model DemoIt {
  id        Int    @id
  dataField String @map("data_field")
}
"
`;

exports[`it can enforce a specified case convention on all fields of all tables (snakeCase): snakeCase 2`] = `
"datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Projects {
  id         Int          @id @default(autoincrement())
  name       String?      @db.VarChar
  jiraIssues JiraIssues[]

  @@map("projects")
}

model JiraIssues {
  id                Int       @id @default(autoincrement())
  jiraIntegrationId Int?      @map("jira_integration_id")
  projectId         Int       @map("project_id")
  projects          Projects? @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "jira_issues_projects_fkey")

  @@map("jira_issues")
}

model FieldKey {
  key    String
  type   String // str, num, bool
  formId String @map("form_id") @db.Uuid
  form   Form   @relation(references: [id], fields: [formId], onDelete: Cascade)

  @@id([key, formId])
  @@map("field_key")
}
"
`;

exports[`it can enforce a specified case convention on all fields of all tables (snakeCase): snakeCase 3`] = `
"datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Business {
  id                 String               @id(map: "BusinessId") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  languageCode       String               @map("language_code") @db.Char(2)
  currencyCode       String               @map("currency_code") @db.Char(3)
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamptz(0)
  name               String               @db.VarChar(64)
  language           String[]             @default([]) @db.Char(2)
  phone              String               @db.VarChar(15)
  address            String?              @db.VarChar(250)
  billingName        String?              @map("billing_name") @db.VarChar(64)
  billingAddress     String?              @map("billing_address") @db.VarChar(250)
  taxOffice          String?              @map("tax_office") @db.VarChar(64)
  taxId              String?              @map("tax_id") @db.VarChar(64)
  defaultTaxRate     Decimal?             @map("default_tax_rate") @db.Decimal(8, 6)
  isActive           Boolean              @default(true) @map("is_active")
  batchOperation     BatchOperation[]
  currency           Currency             @relation(fields: [currencyCode], references: [code], onUpdate: Restrict, map: "BusinessCurrency")
  language           Language             @relation(fields: [languageCode], references: [code], onUpdate: Restrict, map: "BusinessLanguage")
  ingredientCategory IngredientCategory[]
  itemCategory       ItemCategory[]
  optionCategory     OptionCategory[]
  profile            Profile[]
  recipe             Recipe[]
  tab                Tab[]
  targetGroup        TargetGroup[]

  @@schema("public")
}
"
`;

exports[`it can enforce a specified case convention on all table names (camelCase): camelCase 1`] = `
"datasource db {
  provider = "sqlite"
  url      = "file:database.db"
}

// generator
generator client {
  provider = "prisma-client-js"
}

model DemoIt {
  id        Int    @id
  dataField String @map("data_field")

  @@map("demoIt")
}
"
`;

exports[`it can enforce a specified case convention on all table names (camelCase): camelCase 2`] = `
"datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Projects {
  id         Int          @id @default(autoincrement())
  name       String?      @db.VarChar
  jiraIssues JiraIssues[]

  @@map("projects")
}

model JiraIssues {
  id                Int       @id @default(autoincrement())
  jiraIntegrationId Int?      @map("jira_integration_id")
  projectId         Int       @map("project_id")
  projects          Projects? @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "jira_issues_projects_fkey")

  @@map("jiraIssues")
}

model FieldKey {
  key    String
  type   String // str, num, bool
  formId String @map("form_id") @db.Uuid
  form   Form   @relation(references: [id], fields: [formId], onDelete: Cascade)

  @@id([key, formId])
  @@map("fieldKey")
}
"
`;

exports[`it can enforce a specified case convention on all table names (camelCase): camelCase 3`] = `
"datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Business {
  id                 String               @id(map: "BusinessId") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  languageCode       String               @db.Char(2)
  currencyCode       String               @db.Char(3)
  createdAt          DateTime             @default(now()) @db.Timestamptz(0)
  name               String               @db.VarChar(64)
  language           String[]             @default([]) @db.Char(2)
  phone              String               @db.VarChar(15)
  address            String?              @db.VarChar(250)
  billingName        String?              @db.VarChar(64)
  billingAddress     String?              @db.VarChar(250)
  taxOffice          String?              @db.VarChar(64)
  taxId              String?              @db.VarChar(64)
  defaultTaxRate     Decimal?             @db.Decimal(8, 6)
  isActive           Boolean              @default(true)
  batchOperation     BatchOperation[]
  currency           Currency             @relation(fields: [currencyCode], references: [code], onUpdate: Restrict, map: "BusinessCurrency")
  language           Language             @relation(fields: [languageCode], references: [code], onUpdate: Restrict, map: "BusinessLanguage")
  ingredientCategory IngredientCategory[]
  itemCategory       ItemCategory[]
  optionCategory     OptionCategory[]
  profile            Profile[]
  recipe             Recipe[]
  tab                Tab[]
  targetGroup        TargetGroup[]

  @@map("business")
  @@schema("public")
}
"
`;

exports[`it can enforce a specified case convention on all table names (pascalCase): pascalCase 1`] = `
"datasource db {
  provider = "sqlite"
  url      = "file:database.db"
}

// generator
generator client {
  provider = "prisma-client-js"
}

model DemoIt {
  id        Int    @id
  dataField String @map("data_field")
}
"
`;

exports[`it can enforce a specified case convention on all table names (pascalCase): pascalCase 2`] = `
"datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Projects {
  id         Int          @id @default(autoincrement())
  name       String?      @db.VarChar
  jiraIssues JiraIssues[]
}

model JiraIssues {
  id                Int       @id @default(autoincrement())
  jiraIntegrationId Int?      @map("jira_integration_id")
  projectId         Int       @map("project_id")
  projects          Projects? @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "jira_issues_projects_fkey")
}

model FieldKey {
  key    String
  type   String // str, num, bool
  formId String @map("form_id") @db.Uuid
  form   Form   @relation(references: [id], fields: [formId], onDelete: Cascade)

  @@id([key, formId])
}
"
`;

exports[`it can enforce a specified case convention on all table names (pascalCase): pascalCase 3`] = `
"datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Business {
  id                 String               @id(map: "BusinessId") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  languageCode       String               @db.Char(2)
  currencyCode       String               @db.Char(3)
  createdAt          DateTime             @default(now()) @db.Timestamptz(0)
  name               String               @db.VarChar(64)
  language           String[]             @default([]) @db.Char(2)
  phone              String               @db.VarChar(15)
  address            String?              @db.VarChar(250)
  billingName        String?              @db.VarChar(64)
  billingAddress     String?              @db.VarChar(250)
  taxOffice          String?              @db.VarChar(64)
  taxId              String?              @db.VarChar(64)
  defaultTaxRate     Decimal?             @db.Decimal(8, 6)
  isActive           Boolean              @default(true)
  batchOperation     BatchOperation[]
  currency           Currency             @relation(fields: [currencyCode], references: [code], onUpdate: Restrict, map: "BusinessCurrency")
  language           Language             @relation(fields: [languageCode], references: [code], onUpdate: Restrict, map: "BusinessLanguage")
  ingredientCategory IngredientCategory[]
  itemCategory       ItemCategory[]
  optionCategory     OptionCategory[]
  profile            Profile[]
  recipe             Recipe[]
  tab                Tab[]
  targetGroup        TargetGroup[]

  @@schema("public")
}
"
`;

exports[`it can enforce a specified case convention on all table names (snakeCase): snakeCase 1`] = `
"datasource db {
  provider = "sqlite"
  url      = "file:database.db"
}

// generator
generator client {
  provider = "prisma-client-js"
}

model DemoIt {
  id        Int    @id
  dataField String @map("data_field")

  @@map("demo_it")
}
"
`;

exports[`it can enforce a specified case convention on all table names (snakeCase): snakeCase 2`] = `
"datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Projects {
  id         Int          @id @default(autoincrement())
  name       String?      @db.VarChar
  jiraIssues JiraIssues[]

  @@map("projects")
}

model JiraIssues {
  id                Int       @id @default(autoincrement())
  jiraIntegrationId Int?      @map("jira_integration_id")
  projectId         Int       @map("project_id")
  projects          Projects? @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "jira_issues_projects_fkey")

  @@map("jira_issues")
}

model FieldKey {
  key    String
  type   String // str, num, bool
  formId String @map("form_id") @db.Uuid
  form   Form   @relation(references: [id], fields: [formId], onDelete: Cascade)

  @@id([key, formId])
  @@map("field_key")
}
"
`;

exports[`it can enforce a specified case convention on all table names (snakeCase): snakeCase 3`] = `
"datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Business {
  id                 String               @id(map: "BusinessId") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  languageCode       String               @db.Char(2)
  currencyCode       String               @db.Char(3)
  createdAt          DateTime             @default(now()) @db.Timestamptz(0)
  name               String               @db.VarChar(64)
  language           String[]             @default([]) @db.Char(2)
  phone              String               @db.VarChar(15)
  address            String?              @db.VarChar(250)
  billingName        String?              @db.VarChar(64)
  billingAddress     String?              @db.VarChar(250)
  taxOffice          String?              @db.VarChar(64)
  taxId              String?              @db.VarChar(64)
  defaultTaxRate     Decimal?             @db.Decimal(8, 6)
  isActive           Boolean              @default(true)
  batchOperation     BatchOperation[]
  currency           Currency             @relation(fields: [currencyCode], references: [code], onUpdate: Restrict, map: "BusinessCurrency")
  language           Language             @relation(fields: [languageCode], references: [code], onUpdate: Restrict, map: "BusinessLanguage")
  ingredientCategory IngredientCategory[]
  itemCategory       ItemCategory[]
  optionCategory     OptionCategory[]
  profile            Profile[]
  recipe             Recipe[]
  tab                Tab[]
  targetGroup        TargetGroup[]

  @@map("business")
  @@schema("public")
}
"
`;

exports[`it can enforce a specified case convention on views 1`] = `
"generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/@generated/read"
  previewFeatures = ["views"]
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgres"
  url      = env("DB_URL")
}

model GooseDbVersion {
  id          Int                    @id @default(autoincrement())
  versionId   BigInt                 @map("version_id")
  isApplied   Boolean                @map("is_applied")
  tstamp      DateTime?              @default(now()) @db.Timestamp(6)
  circleValue Unsupported("circle")? @map("circle_value")

  @@map("goose_db_version")
}

view Accounts {
  id        String    @unique @db.Uuid
  createdAt DateTime? @map("created_at") @db.Timestamp(6)
  name      String?
  updatedAt DateTime? @map("updated_at") @db.Timestamp(6)
  ownedBy   String?   @map("owned_by") @db.Uuid
  users     User[]

  @@map("accounts")
}

model User {
  id         String    @id
  name       String
  accounts   Accounts? @relation(fields: [accountsId], references: [id])
  accountsId String?   @map("accounts_id") @db.Uuid

  @@map("user")
}
"
`;

exports[`it can map ...horrendous indexes that make your head hurt for these people 1`] = `
"datasource db {
  provider = "mysql"
  url      = "file:database.db"
}

// generator
generator client {
  provider = "prisma-client-js"
}

model Post {
  @@map("post")
  id      Int     @id @default(autoincrement())
  titlePain   String @map("title_pain")
  contentHash String? @map("content_hash")

  @@index(fields: [titlePain, contentHash(length: 12)], name: "main_index")
}

model Address {
  @@map("address")
  id     Int    @id
  street String
  number Int
  user   User[]
}

model User {
  @@map("user")
  id        Int     @id
  email     String
  address   Address @relation(fields: [addressId], references: [id])
  addressId Int @map("address_id")

  @@index([addressId], map: "an_index_name")
}
"
`;

exports[`it can map enum column to enum definition 1`] = `
"datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Posts {
  id        Int      @id @default(autoincrement())
  content   String?  @db.VarChar(245)
  post_type PostType @map("postType")

  @@map("posts")
}

enum PostType {
  Note
  Question

  @@map("post_type")
}

enum SnaggleFlark {
  foo
  buz
  bazz

  @@map("snaggle_flark")
}

enum AppleColors {
  green
  red
}
"
`;

exports[`it can rename enum in the database 1`] = `
"enum UserLocale {
  fr_FR
  en_EN

  @@map("user_locale")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  firstName String     @default("") @map("first_name")
  lastName  String     @default("") @map("last_name")
  locale    UserLocale @default(fr_FR)

  @@map("user")
}
"
`;

exports[`the readme demo should work 1`] = `
"model HouseRating {
  @@map("house_rating")
  Id       Int @map("id")    @id @default(autoincrement())
  HouseId String @map("house_id")
  House    House  @relation(fields: [HouseId], references: [Id])
}

model House {
  @@map("house")
  Id           String @map("id")         @id @default(uuid()) // comments
  HouseRating HouseRating[] // do comments get
}
"
`;
